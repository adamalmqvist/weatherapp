{"version":3,"sources":["shared/api/getWeather.ts","components/appComponent/AppComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getWeather","search","a","axios","get","params","q","units","APPID","data","AppComponent","useState","setSearch","weather","setWeather","getData","e","key","console","log","main","temp","className","type","name","placeholder","value","onChange","target","onKeyPress","Math","round","src","icon","alt","description","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAeeA,EAVC,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACMC,IAAMC,IAJnB,kDAI4B,CAChCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEG,uBACRC,EADQ,EACRA,KADQ,kBAQRA,GARQ,2CAAH,sD,eCAHC,EAAe,WAAO,IAAD,EACFC,mBAAc,IADZ,mBACvBV,EADuB,KACfW,EADe,OAEAD,mBAAc,IAFd,mBAEvBE,EAFuB,KAEdC,EAFc,KAIxBC,EAAO,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACC,UAAVc,EAAEC,IADO,gCAEWjB,EAAWC,GAFtB,OAEFQ,EAFE,OAGRK,EAAWL,GACXG,EAAU,IACVM,QAAQC,IAAIV,EAAKW,KAAKC,MALd,2CAAH,sDAWb,OAHAH,QAAQC,IAAIN,GACZK,QAAQC,IAAIN,EAAQQ,MAGhB,gCACI,qBAAKC,UAAU,SAAf,SAAwB,uDAC7B,sBAAKA,UAAU,YAAf,UAEP,uBAAOA,UAAU,cAAaC,KAAK,OAAOC,KAAK,GAAGC,YAAY,SAASC,MAAOzB,EAAQ0B,SAAU,SAACX,GAAD,OAAOJ,EAAUI,EAAEY,OAAOF,QAAQG,WAAYd,IAC9I,wBAAQO,UAAU,eAAlB,SACI,mBAAGA,UAAU,iBAAb,yBAMYT,EAAQO,MACZ,sBAAKE,UAAU,mBAAf,UACI,6BAAKT,EAAQW,OACb,+BAAKM,KAAKC,MAAMlB,EAAQO,KAAKC,MAA7B,WACA,qBAAKW,IAAG,2CAAsCnB,EAAQA,QAAQ,GAAGoB,KAAzD,WAAwEC,IAAKrB,EAAQA,QAAQ,GAAGsB,qBC3BzGC,MARf,WACE,OAEF,cAAC,EAAD,KCSeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fbaa6ff0.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst URL = 'https://api.openweathermap.org/data/2.5/weather'\nconst API_KEY = 'ca76b757afc5b577e51f15a96d920bcc'\n\nconst getWeather = async (search: string) => {\n    const {data} = await axios.get(URL, {\n        params: {\n            q: search,\n            units: 'metric',\n            APPID: API_KEY\n        }\n    })\n    return data\n}\nexport default getWeather \n","import getWeather from '../../shared/api/getWeather'\nimport {useState} from 'react'\nimport '../appComponent/AppComponent.css'\n\n\nexport const AppComponent = () => {\n    const [search, setSearch] = useState<any>('')\n    const [weather, setWeather] = useState<any>({})\n\n    const getData = async (e: any) => {\n        if(e.key === 'Enter'){\n            const data = await getWeather(search)\n            setWeather(data)\n            setSearch('')  \n            console.log(data.main.temp)\n        }\n    }\n    console.log(weather)\n    console.log(weather.temp)\n  \n    return (\n        <div>\n            <div className=\"header\"><h1>Weather Application</h1></div>\n       <div className=\"searchBox\">\n\n<input className=\"searchInput\"type=\"text\" name=\"\" placeholder=\"Search\" value={search} onChange={(e) => setSearch(e.target.value)} onKeyPress={getData}></input>\n<button className=\"searchButton\">\n    <i className=\"material-icons\">\n        search\n    </i>\n    \n</button>\n</div>\n               {weather.main && ( \n            <div className=\"weatherContainer\">\n                <h1>{weather.name}</h1>\n                <h2>{Math.round(weather.main.temp)}Â°C</h2>\n                <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description}></img>\n            </div>\n               )}\n        </div>\n    )\n}\n","import {AppComponent} from '../src/components/appComponent/AppComponent'\n\nfunction App() {\n  return (\n\n<AppComponent/>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}